package com.dpd.common.ws.loginservice.v2_0;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.2.4
 * 2018-10-01T11:06:56.756+02:00
 * Generated source version: 3.2.4
 *
 */
@WebService(targetNamespace = "http://dpd.com/common/service/LoginService/2.0", name = "LoginService")
@XmlSeeAlso({com.dpd.common.ws.authentication.v2_0.types.ObjectFactory.class, com.dpd.common.ws.loginservice.v2_0.types.ObjectFactory.class})
public interface LoginService {

    /**
     * Creates an authentication token for the committed user if user name and password are valid.
     * The authentication token is needed for accessing other DPD Web Services.
     * 
     * Sample request:
     * 
     * SOAP:
     * <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
     * 	xmlns:ns="http://dpd.com/common/service/types/LoginService/2.0">
     *    <soapenv:Header/>
     *    <soapenv:Body>
     *        <ns:getAuth>
     *            <delisId><your delisId></delisId>
     *            <password><your password></password>
     *            <messageLanguage>de_DE</messageLanguage>
     *        </ns:getAuth>
     *    </soapenv:Body>
     * <soapenv:Envelope>
     * 
     * REST:
     * URL: <server:port><path>/LoginService/V2_0/getAuth
     * JSON-Data for POST-Request (for GET-Request data must send with parameter "request" and for
     * JSONP the Parameter "jsonpcallback" can be used, to send a padding function name):
     * 
     * {
     *  "delisId" : "<your delisId>",
     *  "password": "<your password>",
     *  "messageLanguage":"en_EN"
     * }
     * 
     * REST-Result, without error:
     * 
     * {
     *    "getAuthResponse": {"return":    {
     *       "delisId": "<your delisId>",
     *       "customerUid": "<your customerUid>",
     *       "authToken": "<your authentication token>",
     *       "depot": "<your customerUid>"
     *    }},
     *    "status":    {
     *       "type": "OK",
     *       "code": "200",
     *       "message": "valid"
     *    }
     * }
     * 
     * REST-Result, if an error occurred:
     * 
     * {"status": {
     *    "type": "AuthenticationFault",
     *    "code": "<Error code, e.g. LOGIN_8>",
     *    "message": "<Error message, e.g. The combination of user and password is invalid.>"
     * }}
     * 
     * Additional REST-State on system error:
     * Error-Code: 100
     * Error-Type: SystemFault
     * Error-Message: <Message, which describe the error>
     */
    @WebMethod(action = "http://dpd.com/common/service/LoginService/2.0/getAuth")
    @RequestWrapper(localName = "getAuth", targetNamespace = "http://dpd.com/common/service/types/LoginService/2.0", className = "com.dpd.common.ws.loginservice.v2_0.types.GetAuth")
    @ResponseWrapper(localName = "getAuthResponse", targetNamespace = "http://dpd.com/common/service/types/LoginService/2.0", className = "com.dpd.common.ws.loginservice.v2_0.types.GetAuthResponse")
    @WebResult(name = "return", targetNamespace = "")
    public com.dpd.common.ws.loginservice.v2_0.types.Login getAuth(
        @WebParam(name = "delisId", targetNamespace = "")
        java.lang.String delisId,
        @WebParam(name = "password", targetNamespace = "")
        java.lang.String password,
        @WebParam(name = "messageLanguage", targetNamespace = "")
        java.lang.String messageLanguage
    ) throws AuthenticationFaultMsg;
}
